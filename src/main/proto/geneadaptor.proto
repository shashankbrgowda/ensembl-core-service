syntax = "proto3";

import "commons.proto";

option java_multiple_files = true;
option java_package = "org.ebi.ensembl.grpc.gene";
option java_outer_classname = "GeneAdaptorProto";

service GeneAdaptor {
  // Retrieves count of gene objects from the database via its biotype or biotypes.
  rpc CountAllByBioTypes(CountAllGenesByBioTypesRequest) returns (CountResponse) {};

  // TODO: BASE ADAPTOR Returns the features created from the database defined by the the IDs in
  // contained in the provided ID list $id_list. The features will be returned in their native
  // coordinate system. That is, the coordinate system in which they are stored in the database. In
  // order to convert the features to a particular coordinate system use the transfer() or
  // transform() method. If none of the features are found in the database a reference to an empty
  // list is returned.
  rpc FetchAllByDbIdList(FetchAllGenesByDbIdListRequest) returns (MultiGeneResponse) {};

  // Overrides superclass method to optionally load transcripts immediately rather than lazy-loading
  // them later. This is more efficient when there are a lot of genes whose transcripts are going to
  // be used.
  rpc FetchAllBySlice(FetchAllGenesBySliceRequest) returns (MultiGeneResponse) {};

  // Returns a listref of features identified by their stable IDs. This method only fetches features
  // of the same type as the calling adaptor. Results are constrained to a slice if the slice is
  // provided.
  rpc FetchAllByStableIdList(FetchAllGenesByStableIdListRequest) returns (MultiGeneResponse) {};

  // Returns the feature created from the database defined by the the id $id. The feature will be
  // returned in its native coordinate system. That is, the coordinate system in which it is stored
  // in the database. In order to convert it to a particular coordinate system use the transfer() or
  // transform() method. If the feature is not found in the database then undef is returned instead
  rpc FetchByDbId(FetchGeneByDbIdRequest) returns (Gene) {};

  // Retrieves a gene object from the database via its stable id. The gene will be retrieved in its
  // native coordinate system (i.e. in the coordinate system it is stored in the database). It may
  // be converted to a different coordinate system through a call to transform() or transfer(). If
  // the gene or exon is not found undef is returned instead.
  rpc FetchByStableId(FetchGeneByStableIdRequest) returns (Gene) {};

  // Retrieves a gene from the database via the database identifier of one of its transcripts.
  rpc FetchByTranscriptId(FetchGeneByTranscriptIdRequest) returns (Gene) {};

  // Retrieves a gene from the database via the stable ID of one of its transcripts
  rpc FetchByTranscriptStableId(FetchGeneByTranscriptStableIdRequest) returns (Gene);

  // Retrieves a gene via the stable id of one of its translations.
  rpc FetchByTranslationStableId(FetchGeneByTranslationStableIdRequest) returns (Gene);
}

message FetchAllGenesBySliceRequest {
  RequestMetadata request_metadata = 1;

  // The slice to fetch genes on.
  Slice slice = 2;

  // (optional) the logic name of the type of features to obtain
  optional string logic_name = 3;

  // (optional) if true, transcripts will be loaded immediately rather than lazy loaded later.
  optional bool load_transcripts = 4;

  // (optional) the source name of the features to obtain.
  optional string source = 5;

  // (optional) the biotype of the features to obtain.
  optional string bio_type = 6;
}

message FetchGeneByTranslationStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable id of a translation of the gene to be obtained
  string translation_stable_id = 2;
}

message FetchGeneByTranscriptStableIdRequest {
  RequestMetadata request_metadata = 1;

  // transcript stable ID whose gene should be retrieved
  string transcriptStableId = 2;
}

message FetchGeneByTranscriptIdRequest {
  RequestMetadata request_metadata = 1;

  // Unique database identifier for the transcript whose gene should be
  // retrieved. The gene is returned in its native coord system (i.e. the coord_system it is
  // stored in). If the coord system needs to be changed, then tranform or transfer should be
  // called on the returned object. undef is returned if the gene or transcript is not found in
  // the database.
  string transcript_id = 2;
}

message FetchGeneByStableIdVersionRequest {
  RequestMetadata request_metadata = 1;

  // The stable ID of the gene to retrieve
  string stable_id = 2;

  // The version of the stable_id to retrieve
  int32 version = 3;
}

message FetchGeneByStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable ID of the gene to retrieve
  string stable_id = 2;
}

message FetchAllGenesByStableIdListRequest {
  RequestMetadata request_metadata = 1;

  // Stable ID list
  repeated string stable_ids = 2;

  // The slice from which to obtain features
  Slice slice = 3;
}

message FetchAllGenesByDbIdListRequest {
  RequestMetadata request_metadata = 1;

  // The unique database identifiers for the features to be obtained.
  repeated int32 db_ids = 2;

  // (Optional) Slice to map features onto.
  optional Slice slice = 3;
}

message MultiGeneResponse {
  repeated Gene genes = 1;
}

message CountAllGenesByBioTypesRequest {
  RequestMetadata request_metadata = 1;

  // The biotype of the gene to retrieve. You can have as an argument a reference to a list of biotypes
  repeated string bio_types = 2;
}

message FetchGeneByDbIdRequest {
  RequestMetadata request_metadata = 1;

  // The unique database identifier for the feature to be obtained
  int32 db_id = 2;
}
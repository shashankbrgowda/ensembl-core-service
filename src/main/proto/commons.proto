syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.ebi.ensembl.grpc.common";
option java_outer_classname = "CommonsProto";

message ConnectionParams {
  // db host name
  string host = 1;
  // port number
  int32 port = 2;
  // database name
  string db_name = 3;
  string user_name = 4;
  string password = 5;
}

message AdaptorMetadata {
  // ex: Human
  string species = 1;
  // ex: Core
  string group = 2;
  // ex: Gene
  string type = 3;
}

// To be queried from python and added: species id, db metadata(db name, tables and meta table) based
// on passed adaptor metadata
message RequestMetadata {
  AdaptorMetadata adaptor_metadata = 1;
  ConnectionParams connection_params = 2;
}

message Analysis {
  int32 analysis_id = 1;
  string logic_name = 2;
  string db = 3;
  string db_version = 4;
  string db_file = 5;
  string program = 6;
  string program_version = 7;
  string program_file = 8;
  string gff_source = 9;
  string gff_feature = 10;
  string module = 11;
  string module_version = 12;
  string parameters = 13;
  string created = 14;
  string description = 15;
  string display_label = 16;
  int32 displayable = 17;
  string web_data = 18;
}

message Slice {
  CoordSystem coord_system = 1;
  int32 start = 2;
  int32 end = 3;
  int32 strand = 4;
  int32 seq_region_id = 5;
  string seq_region_name = 6;
  int32 seq_region_length = 7;
}

message CoordSystem {
  // The name of the coordinate system
  string name = 1;
  // (optional) The version of the coordinate system. Note that if the version passed in is undefined,
  // it will be set to the empty string in the resulting CoordSystem object.
  string version = 2;
  // The rank of the coordinate system. The highest level coordinate system should have rank 1, the
  // second highest rank 2 and so on.  An example of a high level coordinate system is 'chromosome' an
  // example of a lower level coordinate system is 'clone'.
  int32 rank = 3;
  // (optional) Sets whether this is a top-level coord system. Default = 0. This should only be set to
  // true if you are creating an artificial toplevel coordsystem by the name of 'toplevel'
  int32 top_level = 4;
  //  (optional) Sets whether this is a sequence level coordinate system. Default = 0
  int32 sequence_level = 5;
  // (optional) Whether this is the default version of the coordinate systems of this name. Default = 0
  int32 default = 6;
  // (optional) The internal identifier of this coordinate system
  int32 db_id = 7;
  // (optional) Sets an alias for a coordsystem. If set it should only be set to 'chromosome'
  string alias_to = 8;
}

message Gene {
  // DB Identifier
  int32 db_id = 1;
  // The stable identifier of this gene
  string stable_id = 2;
  // the version of the stable identifier of this gene
  int32 version = 3;
  int32 seq_region_id = 4;
  // Start position of the gene
  int32 start = 5;
  // end position of the gene
  int32 end = 6;
  // The strand the gene is on
  int32 strand = 7;
  // the biotype e.g. "protein_coding"
  string bio_type = 8;
  // The genes description
  string description = 9;
  // the genes source, e.g. "ensembl"
  string source = 10;
  int32 analysis_id = 11;
  // specifies if this is the current version of the gene
  bool is_current = 12;
  int32 display_xref_id = 13;
  // the canonical transcript dbID of this gene, if the transcript object itself is not available.
  int32 canonical_transcript_id = 14;
  // the date the gene was created
  string created_date = 15;
  // the date the gene was last modified
  string modified_date = 16;
  Slice slice = 17;
  Analysis analysis = 18;
  DBEntry display_xref = 19;
}

message Transcript {
  int32 db_id = 1;
  string stable_id = 2;
  int32 version = 3;
  int32 seq_region_id = 4;
  int32 start = 5;
  int32 end = 6;
  int32 strand = 7;
  string bio_type = 8;
  string description = 9;
  string source = 10;
  int32 analysis_id = 11;
  bool is_current = 12;
  int32 display_xref_id = 13;
  string created_date = 14;
  string modified_date = 15;
  Slice slice = 16;
  Analysis analysis = 17;
  DBEntry display_xref = 18;
}

message Translation {
  int32 translation_id = 1;
  int32 seq_start = 2;
  int32 seq_end = 3;
  int32 start_exon_id = 4;
  int32 end_exon_id = 5;
  string stable_id = 6;
  int32 version = 7;
  string created_date = 8;
  string modified_date = 9;
  int32 transcript_id = 10;
}

message Exon {
 int32 exon_id = 1;
 int32 seq_region_id = 2;
 int32 seq_region_start = 3;
 int32 seq_region_end = 4;
 int32 seq_region_strand = 5;
 int32 phase = 6;
 int32 end_phase = 7;
 bool is_current = 8;
 bool is_constitutive = 9;
 string stable_id = 10;
 int32 version = 11;
 string created_date = 12;
 string modified_date = 13;
 Slice slice = 14;
}

message DBEntry {
  int32 db_id = 1;
  string display_id = 2;
  string primary_id = 3;
  int32 version = 4;
  string description = 5;
  string release = 6;
  string dbname = 7;
  string status = 8;
  string db_display_name = 9;
  string info_type = 10;
  string info_text = 11;
}

message CountResponse {
  // count of result set
  int32 count = 1;
}

message EmptyRequest {
  RequestMetadata request_metadata = 1;
}
syntax = "proto3";

import "commons.proto";

option java_multiple_files = true;
option java_package = "org.ebi.ensembl.grpc.gene";
option java_outer_classname = "GeneAdaptorProto";

service GeneAdaptor {
  // Retrieves count of gene objects from the database via its biotype or biotypes.
  rpc CountAllByBioTypes(CountAllGenesByBioTypesRequest) returns (CountResponse) {};

  // Method to count genes on a given slice, filtering by biotype and source
  rpc CountAllBySlice(CountAllGenesBySliceRequest) returns (CountResponse) {};

  // Retrieves count of gene objects from the database via its source or sources.
  rpc CountAllBySources(CountAllGenesBySourcesRequest) returns (CountResponse) {};

  // Retrieves genes which are alternate alleles to a provided gene. Alternate alleles in Ensembl
  // are genes which are similar and are on an alternative haplotype of the same region. There are
  // not currently very many of these. This method will return a reference to an empty list if no
  // alternative alleles are found.
  rpc FetchAllAltAlleles(FetchAllGeneAltAllelesRequest) returns (MultiGeneResponse) {};

  // Retrieves an array reference of gene objects from the database via its biotype or biotypes. The
  // genes will be retrieved in its native coordinate system (i.e. in the coordinate system it is
  // stored in the database). It may be converted to a different coordinate system through a call to
  // transform() or transfer(). If the gene or exon is not found undef is returned instead.
  rpc FetchAllByBioTypes(FetchAllGenesByBioTypesRequest) returns (MultiGeneResponse) {};

  // TODO: BASE ADAPTOR Returns the features created from the database defined by the the IDs in
  // contained in the provided ID list $id_list. The features will be returned in their native
  // coordinate system. That is, the coordinate system in which they are stored in the database. In
  // order to convert the features to a particular coordinate system use the transfer() or
  // transform() method. If none of the features are found in the database a reference to an empty
  // list is returned.
  rpc FetchAllByDbIdList(FetchAllGenesByDbIdListRequest) returns (MultiGeneResponse) {};

  // Fetches genes by their textual description. Fully supports SQL wildcards, since getting an
  // exact hit is unlikely.
  rpc FetchAllByDescription(FetchAllGenesByDescriptionRequest) returns (MultiGeneResponse) {};

  // Returns all genes which have the given display label or undef if there are none.
  rpc FetchAllByDisplayLabel(FetchAllGenesByDisplayLabelRequest) returns (MultiGeneResponse) {};

  // Gets all the genes with transcripts with exons which have a specified hit on a particular type
  // of feature. Optionally filter by analysis.
  rpc FetchAllByExonSupportingEvidence(FetchAllGenesByExonSupportingEvidenceRequest) returns (MultiGeneResponse) {};

  // Retrieves a list of genes with an external database identifier externalName. The genes returned
  // are in their native coordinate system, i.e. in the coordinate system they are stored in the
  // database in. If another coordinate system is required then the Gene::transfer or
  // Gene::transform method can be used. SQL wildcards % and _ are supported in the externalName,
  // but their use is somewhat restricted for performance reasons. Users that really do want % and _
  // in the first three characters should use argument 4 (sqlOverride) to prevent optimisations
  rpc FetchAllByExternalName(FetchAllGenesByExternalNameRequest) returns (MultiGeneResponse) {};

  // Retrieves a list of genes that are associated with the given ontology linkage type. The genes
  // returned are in their native coordinate system, i.e. in the coordinate system in which they are
  // stored in the database.
  rpc FetchAllByOntologyLinkageType(FetchAllGenesByOntologyLinkageTypeRequest) returns (MultiGeneResponse) {};

  // Overrides superclass method to optionally load transcripts immediately rather than lazy-loading
  // them later. This is more efficient when there are a lot of genes whose transcripts are going to
  // be used.
  rpc FetchAllBySlice(FetchAllGenesBySliceRequest) returns (MultiGeneResponse) {};

  // Overrides superclass method to optionally load transcripts immediately rather than lazy-loading
  // them later. This is more efficient when there are a lot of genes whose transcripts are going to
  // be used. The genes are then filtered to return only those with external database links of the
  // type specified
  rpc FetchAllBySliceAndExternalDbNameLink(FetchAllGenesBySliceAndExternalDbNameLinkRequest) returns (MultiGeneResponse) {};

  // Retrieves an array reference of gene objects from the database via its source or sources. The
  // gene will be retrieved in its native coordinate system (i.e. in the coordinate system it is
  // stored in the database). It may be converted to a different coordinate system through a call to
  // transform() or transfer(). If the gene or exon is not found undef is returned instead.
  rpc FetchAllBySources(FetchAllGenesBySourcesRequest) returns (MultiGeneResponse) {};

  // Returns a listref of features identified by their stable IDs. This method only fetches features
  // of the same type as the calling adaptor. Results are constrained to a slice if the slice is
  // provided.
  rpc FetchAllByStableIdList(FetchAllGenesByStableIdListRequest) returns (MultiGeneResponse) {};

  // Gets all the genes with transcripts with evidence for a specified hit on a particular type of
  // feature. Optionally filter by analysis.
  rpc FetchAllByTranscriptSupportingEvidence(FetchAllGenesByTranscriptSupportingEvidenceRequest) returns (MultiGeneResponse) {};

  // Similar to fetch_by_stable_id, but retrieves all versions of a gene stored in the database.
  rpc FetchAllVersionsByStableId(FetchAllGeneVersionsByStableIdRequest) returns (MultiGeneResponse) {};

  // Returns the feature created from the database defined by the the id $id. The feature will be
  // returned in its native coordinate system. That is, the coordinate system in which it is stored
  // in the database. In order to convert it to a particular coordinate system use the transfer() or
  // transform() method. If the feature is not found in the database then undef is returned instead
  rpc FetchByDbId(FetchGeneByDbIdRequest) returns (Gene) {};

  // Returns the gene which has the given display label or undef if there is none. If there are more
  // than 1, the gene on the reference slice is reported or if none are on the reference, the first
  // one is reported.
  rpc FetchByDisplayLabel(FetchGeneByDisplayLabelRequest) returns (Gene) {};

  // Retrieves a gene object from the database via an exon stable id. The gene will be retrieved in
  // its native coordinate system (i.e. in the coordinate system it is stored in the database). It
  // may be converted to a different coordinate system through a call to transform() or transfer().
  // If the gene or exon is not found undef is returned instead.
  rpc FetchByExonStableId(FetchGeneByExonStableIdRequest) returns (Gene) {};

  // Retrieves a gene object from the database via its stable id. The gene will be retrieved in its
  // native coordinate system (i.e. in the coordinate system it is stored in the database). It may
  // be converted to a different coordinate system through a call to transform() or transfer(). If
  // the gene or exon is not found undef is returned instead.
  rpc FetchByStableId(FetchGeneByStableIdRequest) returns (Gene) {};

  // Retrieves a gene object from the database via its stable id and version. The gene will be
  // retrieved in its native coordinate system (i.e. in the coordinate system it is stored in the
  // database). It may be converted to a different coordinate system through a call to transform()
  // or transfer(). If the gene or exon is not found undef is returned instead.
  rpc FetchByStableIdVersion(FetchGeneByStableIdVersionRequest) returns (Gene) {};

  // Retrieves a gene from the database via the database identifier of one of its transcripts.
  rpc FetchByTranscriptId(FetchGeneByTranscriptIdRequest) returns (Gene) {};

  // Retrieves a gene from the database via the stable ID of one of its transcripts
  rpc FetchByTranscriptStableId(FetchGeneByTranscriptStableIdRequest) returns (Gene);

  // Retrieves a gene via the stable id of one of its translations.
  rpc FetchByTranslationStableId(FetchGeneByTranslationStableIdRequest) returns (Gene);

  // Stores a gene in the database.
  rpc Store(GeneStoreRequest) returns (GeneStoreResponse) {};
}

message GeneStoreRequest {
  RequestMetadata request_metadata = 1;

  // The gene to store in the database
  Gene gene = 2;

  // ignore_release in xrefs [default 1] set to 0 to use release info in external database references
  bool ignore_release_in_xref = 3;

  // prevent coordinate recalculation if you are persisting transcripts with this gene
  bool prevent_coord_recalc = 4;

  // prevent copying supporting features across exons increased speed for lost accuracy
  bool prevent_support_features_copy = 5;
}

// the database identifier of the newly stored gene
message GeneStoreResponse {
  int32 db_id = 1;
}

message FetchAllGenesBySliceRequest {
  RequestMetadata request_metadata = 1;

  // The slice to fetch genes on.
  Slice slice = 2;

  // (optional) the logic name of the type of features to obtain
  optional string logic_name = 3;

  // (optional) if true, transcripts will be loaded immediately rather than lazy loaded later.
  optional bool load_transcripts = 4;

  // (optional) the source name of the features to obtain.
  optional string source = 5;

  // (optional) the biotype of the features to obtain.
  optional string bio_type = 6;
}

message FetchGeneByTranslationStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable id of a translation of the gene to be obtained
  string translation_stable_id = 2;
}

message FetchGeneByTranscriptStableIdRequest {
  RequestMetadata request_metadata = 1;

  // transcript stable ID whose gene should be retrieved
  string transcriptStableId = 2;
}

message FetchGeneByTranscriptIdRequest {
  RequestMetadata request_metadata = 1;

  // Unique database identifier for the transcript whose gene should be
  // retrieved. The gene is returned in its native coord system (i.e. the coord_system it is
  // stored in). If the coord system needs to be changed, then tranform or transfer should be
  // called on the returned object. undef is returned if the gene or transcript is not found in
  // the database.
  string transcript_id = 2;
}

message FetchGeneByStableIdVersionRequest {
  RequestMetadata request_metadata = 1;

  // The stable ID of the gene to retrieve
  string stable_id = 2;

  // The version of the stable_id to retrieve
  int32 version = 3;
}

message FetchGeneByStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable ID of the gene to retrieve
  string stable_id = 2;
}

message FetchGeneByExonStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable id of an exon of the gene to retrieve
  string exon_stable_id = 2;
}

message FetchGeneByDisplayLabelRequest {
  RequestMetadata request_metadata = 1;

  // display label of gene to fetch
  string display_label = 2;
}

message FetchAllGeneVersionsByStableIdRequest {
  RequestMetadata request_metadata = 1;

  // The stable ID of the gene to retrieve
  string stable_id = 2;
}

message FetchAllGenesByTranscriptSupportingEvidenceRequest {
  RequestMetadata request_metadata = 1;

  // Name of supporting feature
  string hit_name = 2;

  // One of "dna_align_feature" or "protein_align_feature"
  string feature_type = 3;

  // (optional) Analysis
  optional Analysis analysis = 4;
}

message FetchAllGenesByStableIdListRequest {
  RequestMetadata request_metadata = 1;

  // Stable ID list
  repeated string stable_ids = 2;

  // The slice from which to obtain features
  Slice slice = 3;
}

message FetchAllGenesBySourcesRequest {
  RequestMetadata request_metadata = 1;

  // The source of the gene to retrieve. You can have as an argument a reference to a list of sources
  repeated string sources = 2;
}

message FetchAllGenesBySliceAndExternalDbNameLinkRequest {
  RequestMetadata request_metadata = 1;

  // The slice to fetch genes on.
  Slice slice = 2;

  // Name of the external database to fetch the Genes by
  string external_db_name = 3;

  // (optional) the logic name of the type of features to obtain
  optional string logic_name = 4;

  // (optional) if true, transcripts will be loaded immediately rather than lazy loaded later.
  optional bool load_transcripts = 5;
}

message FetchAllGenesByOntologyLinkageTypeRequest {
  RequestMetadata request_metadata = 1;

  // (optional) The database name to search for. Defaults to GO
  optional string db_name = 2;

  // Linkage type to search for e.g. IMP
  string linkage_type = 3;
}

message FetchAllGenesByExternalNameRequest {
  RequestMetadata request_metadata = 1;

  // The external identifier for the gene to be obtained
  string external_name = 2;

  // (optional) The name of the external database from which the identifier originates.
  optional string external_db_name = 3;

  // Boolean override. Force SQL regex matching for users who really do want to find all 'NM%'
  bool sql_override = 4;
}

message FetchAllGenesByExonSupportingEvidenceRequest {
  RequestMetadata request_metadata = 1;

  // Name of supporting feature
  string hit_name = 2;

  // one of "dna_align_feature" or "protein_align_feature"
  string feature_type = 3;

  // (optional) Analysis
  optional Analysis analysis = 4;
}

message FetchAllGenesByDisplayLabelRequest {
  RequestMetadata request_metadata = 1;

  // display label of genes to fetch
  string display_label = 2;
}

message FetchAllGenesByDescriptionRequest {
  RequestMetadata request_metadata = 1;

  // String of description
  string description = 2;
}

message FetchAllGenesByDbIdListRequest {
  RequestMetadata request_metadata = 1;

  // The unique database identifiers for the features to be obtained.
  repeated int32 db_ids = 2;

  // (Optional) Slice to map features onto.
  optional Slice slice = 3;
}

message FetchAllGenesByBioTypesRequest {
  RequestMetadata request_metadata = 1;

  // The biotype of the gene to retrieve.
  repeated string bio_types = 2;
}

message FetchAllGeneAltAllelesRequest {
  RequestMetadata request_metadata = 1;

  // The gene to fetch alternative alleles for
  Gene gene = 2;

  // Ask the method to warn about any gene without an alt allele group.
  bool warn_gene_without_alt_allele = 3;
}

message MultiGeneResponse {
  repeated Gene genes = 1;
}

message CountAllGenesBySourcesRequest {
  RequestMetadata request_metadata = 1;

  // The source of the gene to retrieve.
  repeated string sources = 2;
}

message CountAllGenesBySliceRequest {
  RequestMetadata request_metadata = 1;

  // The slice to count genes on.
  Slice slice = 2;

  // (Optional) the biotype of the features to count.
  optional string bio_type = 3;

  // (Optional) the source name of the features to count.
  optional string source = 4;
}

message CountAllGenesByBioTypesRequest {
  RequestMetadata request_metadata = 1;

  // The biotype of the gene to retrieve. You can have as an argument a reference to a list of biotypes
  repeated string bio_types = 2;
}

message FetchGeneByDbIdRequest {
  RequestMetadata request_metadata = 1;

  // The unique database identifier for the feature to be obtained
  int32 db_id = 2;
}